package io.nti.jaxrs.impl.generated;

/**
 * This code was generated by the JAX-RS annotation processor
 */

import io.nti.jaxrs.Resource;
import io.nti.jaxrs.processors.RequestContext;

import javax.annotation.Generated;
import javax.ws.rs.core.Response;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Generated("ResourceProcessor")
public class ResourceInputProxy extends Resource {

    private final Pattern base = Pattern.compile("^testing");
    private final Pattern regex0 = Pattern.compile("^testing$");
    private final Pattern regex1 = Pattern.compile("^testing(?<id>[^/]+)$");
    private final Pattern regex2 = Pattern.compile("^testing(?<id>\\d+)/testing/(?<other>[^/]+)$");
    private final Pattern regex3 = Pattern.compile("^testing(?<id>\\d+)$");

    public Response process(RequestContext context) {
        final String method = context.getMethod();
        final String uri = context.getUri();
        final com.example.ResourceInput resource = new com.example.ResourceInput();

        Matcher matcher;

        if ("POST".equals(method) && (matcher = regex0.matcher(uri)).matches()) {
            final javax.ws.rs.core.Response result = resource.create(context.getPayload(com.example.Book.class));

            if (result == null) {
                return Response.status(Response.Status.ACCEPTED).build();
            } else {
                return result;
            }

        }

        if ("GET".equals(method) && (matcher = regex1.matcher(uri)).matches()) {
            final com.example.Book result = resource.get(matcher.group("id"));

            if (result == null) {
                return Response.status(Response.Status.ACCEPTED).build();
            } else {
                return Response.ok(result).build();
            }

        }

        if ("GET".equals(method) && (matcher = regex2.matcher(uri)).matches()) {
            final com.example.Book result = resource.put(matcher.group("id"));

            if (result == null) {
                return Response.status(Response.Status.ACCEPTED).build();
            } else {
                return Response.ok(result).build();
            }

        }

        if ("DELETE".equals(method) && (matcher = regex3.matcher(uri)).matches()) {
            resource.delete(Integer.valueOf(matcher.group("id")));
            return Response.status(Response.Status.ACCEPTED).build();
        }

        return Response.status(Response.Status.NOT_FOUND).build();
    }

    public Pattern getBaseMatch() {
        return base;
    }
}
