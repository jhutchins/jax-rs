package {{ package }};

/**
 * This code was generated by the JAX-RS annotation processor
 */

import Resource;
import RequestContext;

import javax.annotation.Generated;
import javax.ws.rs.core.Response;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Generated("{{ generator }}")
public class {{ proxyName }} extends Resource {

    private final Pattern base = Pattern.compile("{{ base }}");
    {% for method in methodDefinitions %}private final Pattern regex{{ loop.index }} = Pattern.compile("{{ method.regex }}");
    {% endfor %}

    public Response process(RequestContext context) {
        final String method = context.getMethod();
        final String uri = context.getUri();
        final {{ name }} resource = new {{ name }}();

        Matcher matcher;
        {% for method in methodDefinitions %}

        if ("{{ method.httpVerb }}".equals(method) && (matcher = regex{{ loop.index }}.matcher(uri)).matches()) {
            {{ method.execution }}

        }
        {% endfor %}

        return Response.status(Response.Status.NOT_FOUND).build();
    }

    public Pattern getBaseMatch() {
        return base;
    }
}